<?php

namespace AccountBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TransactionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionsRepository extends EntityRepository
{
  public function findAllByMonth($month, $year)
  {
    return $this->getEntityManager()
      ->createQuery(
        "SELECT p
        FROM AccountBundle:Transactions p
        WHERE MONTH(p.createAt) = $month
        AND Year(p.createAt) = $year
        AND p.shortDescription != 'savings'
        ORDER BY p.createAt ASC"
      )->getResult();
  }

  public function getCurrentMonth($month, $year)
  {
    $dataGraph = $this->getEntityManager()
      ->createQuery(
        "SELECT SUM(p.amount)
        FROM AccountBundle:Transactions p
        WHERE MONTH(p.createAt) = $month
        AND Year(p.createAt) = $year
        AND p.shortDescription != 'savings'
        GROUP BY p.shortDescription"
      )->execute();

    return $dataGraph;
  }

  public function getDescriptionUsage($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT t.name as shortDescription, sum(p.amount) as total, count(p.transactionType) as ocurrencies
        FROM AccountBundle:Transactions p
        JOIN AccountBundle:TransactionType t
        WHERE p.transactionType = t.id
        AND Month(p.createAt) = $month
        AND Year(p.createAt) = $year
        AND t.name != ''
        AND t.name != 'savings'
        GROUP BY t.name"
      )->execute();

    return $data;
  }

  public function  getDescriptionPerDayInMonth($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT sum(p.amount) as total, Day(p.createAt) as day
        FROM AccountBundle:Transactions p
        WHERE Month(p.createAt) = $month
        AND Year(p.createAt) = $year
        AND p.shortDescription != ''
        AND p.shortDescription != 'savings'
        GROUP BY day"
      )->execute();

    return $data;
  }

  public function getMonths($year)
  {
    $months = $this->getEntityManager()
      ->createQuery(
        "SELECT DISTINCT Month(p.createAt) as months
        FROM AccountBundle:Transactions p
        WHERE Year(p.createAt) = $year
        AND p.shortDescription != 'savings'
        ORDER BY months"
      )->execute();

    return $months;
  }

  public function getDescriptionPerMonth($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT DISTINCT t.name  as description, sum(p.amount) as amount
        FROM AccountBundle:Transactions p
        JOIN AccountBundle:TransactionType t
        WHERE p.transactionType = t.id
        AND Month(p.createAt) = $month
        AND Year(p.createAt) = $year
        AND t.name != 'savings'
        GROUP BY description
        ORDER BY p.createAt"
      )->execute();

    return $data;
  }


  public function getAmountPerDay($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT DAY(p.createAt) as days, sum(p.amount) as amount
        FROM AccountBundle:Transactions p
        WHERE YEAR(p.createAt) = $year
        AND MONTH(p.createAt) = $month
        AND p.shortDescription != 'savings'
        GROUP BY days"
      )->execute();

    return $data;
  }

  public function getTransactionByHash($hash)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT p.id
        FROM AccountBundle:Transactions p
        WHERE p.transactionHash = '$hash'"
      )->execute();

    return $data;
  }
}
