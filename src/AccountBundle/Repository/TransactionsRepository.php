<?php

namespace AccountBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TransactionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionsRepository extends EntityRepository
{
  public function getMonths($year)
  {
    $months = $this->getEntityManager()
      ->createQuery(
        "SELECT DISTINCT Month(p.createAt) as months
        FROM AccountBundle:Transactions p
        WHERE Year(p.createAt) = $year
        ORDER BY months"
      )->execute();

    return $months;
  }

  public function getAllYears() {
    return $this->getEntityManager()
      ->createQuery(
        "SELECT DISTINCT YEAR(p.createAt) as year
        FROM AccountBundle:Transactions p
        ORDER BY p.createAt"
      )->getResult();
  }

  public function findAllByMonth($month, $year)
  {
    return $this->getEntityManager()
      ->createQuery(
        "SELECT p
        FROM AccountBundle:Transactions p
        WHERE MONTH(p.createAt) = $month
        AND Year(p.createAt) = $year
        ORDER BY p.createAt ASC"
      )->getResult();
  }

  public function getCurrentMonth($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT SUM(p.amount)
        FROM AccountBundle:Transactions p
        WHERE MONTH(p.createAt) = $month
        AND Year(p.createAt) = $year
        GROUP BY p.shortDescription"
      )->execute();

    return $data;
  }

  public function getMatchTransactions($transactionId)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT p.amount, p.description
        FROM AccountBundle:Transactions p
        WHERE p.id = $transactionId"
      )->execute();

    $amount = $data[0]['amount'];
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT p.id, p.createAt, p.amount, p.description, t.name
        FROM AccountBundle:Transactions p
        JOIN AccountBundle:TransactionType t
        WHERE
        p.transactionType = t.id"
      )->execute();

    $transactionDescription = preg_split('/[\s\/]/', $data[0]['description']);
    foreach ( $data as $item )
    {
      $itemDescription = $item['description'];
      $itemDescription = preg_replace('!\s+!', ' ', $itemDescription);
      $itemDescription = preg_split('/[\s\/]/', $itemDescription);
      $score = 0;
      foreach ( $itemDescription as $item1)
      {
        if ( in_array($item1, $transactionDescription) )
        {
          echo "$item1 was found </br>";
          $score += 1;
        }
        if ( $score > count($itemDescription)/2 ) {
            var_dump($item['id']);
            echo "</br>";
            var_dump($item['description']);
            echo "</br>";
            echo "$score out of ".count($itemDescription).' '.round((($score*100)/count($itemDescription)), 0)."% match \n";
            echo "</br>";
            $score = 0;
          //  echo "<pre>";
          //  var_dump($itemDescription);
          //  echo "</ br>";
          //  var_dump($transactionDescription);
          //  echo "</pre>";
            //die;
            continue;
        }
      }
    }
    die;
    /*
    $tocompare = $tocompar;
    $tocompare = preg_replace('!\s+!', ' ', $tocompare);
    print($tocompare);
    $compare = preg_split('/[\s\/]/', $tocompare);
    $score = 0;
    foreach ( $compareThing as $item )
    {
        if ( in_array($item, $compare) )
        {
            $score += 1;
        }
    }
    if ( $score > count($compare)/2 ) {
        echo "\n\n\n";
        echo "$score out of ".count($compare).' '.round((($score*100)/count($compare)), 0)."% match \n";
        var_dump($string);
        var_dump($tocompar);
        echo "\n\n\n";
    }
    */

    var_dump($transactionDescription);
    die;
    var_dump($amount);
    var_dump($data);
    die;

    return $data;
  }

  public function getDescriptionUsage($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT t.name as shortDescription, sum(p.amount) as total, count(p.transactionType) as ocurrencies
        FROM AccountBundle:Transactions p
        JOIN AccountBundle:TransactionType t
        WHERE p.transactionType = t.id
        AND Month(p.createAt) = $month
        AND Year(p.createAt) = $year
        AND t.name != ''
        GROUP BY t.name"
      )->execute();

    return $data;
  }

  public function  getDescriptionPerDayInMonth($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT sum(p.amount) as total, Day(p.createAt) as day
        FROM AccountBundle:Transactions p
        WHERE Month(p.createAt) = $month
        AND Year(p.createAt) = $year
        AND p.shortDescription != ''
        GROUP BY day"
      )->execute();

    return $data;
  }

  public function getDescriptionPerMonth($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT DISTINCT t.name  as description, sum(p.amount) as amount
        FROM AccountBundle:Transactions p
        JOIN AccountBundle:TransactionType t
        WHERE p.transactionType = t.id
        AND Month(p.createAt) = $month
        AND Year(p.createAt) = $year
        GROUP BY description
        ORDER BY p.createAt"
      )->execute();

    return $data;
  }


  public function getAmountPerDay($month, $year)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT DAY(p.createAt) as days, sum(p.amount) as amount
        FROM AccountBundle:Transactions p
        WHERE YEAR(p.createAt) = $year
        AND MONTH(p.createAt) = $month
        GROUP BY days"
      )->execute();

    return $data;
  }

  public function getTransactionByHash($hash)
  {
    $data = $this->getEntityManager()
      ->createQuery(
        "SELECT p.id
        FROM AccountBundle:Transactions p
        WHERE p.transactionHash = '$hash'"
      )->execute();

    return $data;
  }
}
